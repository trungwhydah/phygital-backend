// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package astronaut_nft

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// AstronautNftMetaData contains all meta data concerning the AstronautNft contract.
var AstronautNftMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURL\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURIString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801562000010575f80fd5b50604051620034ad380380620034ad83398181016040528101906200003691906200034f565b6040518060400160405280600981526020017f417374726f6e61757400000000000000000000000000000000000000000000008152506040518060400160405280600581526020017f415354524f000000000000000000000000000000000000000000000000000000815250815f9081620000b29190620005d5565b508060019081620000c49190620005d5565b505050620000e7620000db6200010060201b60201c565b6200010760201b60201c565b8060089081620000f89190620005d5565b5050620006b9565b5f33905090565b5f60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160065f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6200022b82620001e3565b810181811067ffffffffffffffff821117156200024d576200024c620001f3565b5b80604052505050565b5f62000261620001ca565b90506200026f828262000220565b919050565b5f67ffffffffffffffff821115620002915762000290620001f3565b5b6200029c82620001e3565b9050602081019050919050565b5f5b83811015620002c8578082015181840152602081019050620002ab565b5f8484015250505050565b5f620002e9620002e38462000274565b62000256565b905082815260208101848484011115620003085762000307620001df565b5b62000315848285620002a9565b509392505050565b5f82601f830112620003345762000333620001db565b5b815162000346848260208601620002d3565b91505092915050565b5f60208284031215620003675762000366620001d3565b5b5f82015167ffffffffffffffff811115620003875762000386620001d7565b5b62000395848285016200031d565b91505092915050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680620003ed57607f821691505b602082108103620004035762000402620003a8565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302620004677fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200042a565b6200047386836200042a565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f620004bd620004b7620004b1846200048b565b62000494565b6200048b565b9050919050565b5f819050919050565b620004d8836200049d565b620004f0620004e782620004c4565b84845462000436565b825550505050565b5f90565b62000506620004f8565b62000513818484620004cd565b505050565b5b818110156200053a576200052e5f82620004fc565b60018101905062000519565b5050565b601f8211156200058957620005538162000409565b6200055e846200041b565b810160208510156200056e578190505b620005866200057d856200041b565b83018262000518565b50505b505050565b5f82821c905092915050565b5f620005ab5f19846008026200058e565b1980831691505092915050565b5f620005c583836200059a565b9150826002028217905092915050565b620005e0826200039e565b67ffffffffffffffff811115620005fc57620005fb620001f3565b5b620006088254620003d5565b620006158282856200053e565b5f60209050601f8311600181146200064b575f841562000636578287015190505b620006428582620005b8565b865550620006b1565b601f1984166200065b8662000409565b5f5b8281101562000684578489015182556001820191506020850194506020810190506200065d565b86831015620006a45784890151620006a0601f8916826200059a565b8355505b6001600288020188555050505b505050505050565b612de680620006c75f395ff3fe608060405234801561000f575f80fd5b506004361061011f575f3560e01c806370a08231116100ab578063a22cb4651161006f578063a22cb465146102f1578063b88d4fde1461030d578063c87b56dd14610329578063e985e9c514610359578063f2fde38b146103895761011f565b806370a082311461025d578063715018a61461028d5780637e41d835146102975780638da5cb5b146102b557806395d89b41146102d35761011f565b806323b872dd116100f257806323b872dd146101bd57806340d097c3146101d957806342842e0e146101f557806355f804b3146102115780636352211e1461022d5761011f565b806301ffc9a71461012357806306fdde0314610153578063081812fc14610171578063095ea7b3146101a1575b5f80fd5b61013d60048036038101906101389190611c14565b6103a5565b60405161014a9190611c59565b60405180910390f35b61015b610486565b6040516101689190611cfc565b60405180910390f35b61018b60048036038101906101869190611d4f565b610515565b6040516101989190611db9565b60405180910390f35b6101bb60048036038101906101b69190611dfc565b610557565b005b6101d760048036038101906101d29190611e3a565b61066d565b005b6101f360048036038101906101ee9190611e8a565b6106cd565b005b61020f600480360381019061020a9190611e3a565b610768565b005b61022b60048036038101906102269190611fe1565b610787565b005b61024760048036038101906102429190611d4f565b6107a2565b6040516102549190611db9565b60405180910390f35b61027760048036038101906102729190611e8a565b610826565b6040516102849190612037565b60405180910390f35b6102956108da565b005b61029f6108ed565b6040516102ac9190611cfc565b60405180910390f35b6102bd610979565b6040516102ca9190611db9565b60405180910390f35b6102db6109a1565b6040516102e89190611cfc565b60405180910390f35b61030b6004803603810190610306919061207a565b610a31565b005b61032760048036038101906103229190612156565b610a47565b005b610343600480360381019061033e9190611d4f565b610aa9565b6040516103509190611cfc565b60405180910390f35b610373600480360381019061036e91906121d6565b610b2b565b6040516103809190611c59565b60405180910390f35b6103a3600480360381019061039e9190611e8a565b610bb9565b005b5f7f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061046f57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061047f575061047e82610c3b565b5b9050919050565b60605f805461049490612241565b80601f01602080910402602001604051908101604052809291908181526020018280546104c090612241565b801561050b5780601f106104e25761010080835404028352916020019161050b565b820191905f5260205f20905b8154815290600101906020018083116104ee57829003601f168201915b5050505050905090565b5f61051f82610ca4565b60045f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b5f610561826107a2565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036105d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c8906122e1565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166105f0610cef565b73ffffffffffffffffffffffffffffffffffffffff16148061061f575061061e81610619610cef565b610b2b565b5b61065e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106559061236f565b60405180910390fd5b6106688383610cf6565b505050565b61067e610678610cef565b82610dac565b6106bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b4906123fd565b60405180910390fd5b6106c8838383610e40565b505050565b6106d561112c565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610743576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073a90612465565b60405180910390fd5b61074d60076111aa565b5f61075860076111be565b905061076482826111ca565b5050565b61078283838360405180602001604052805f815250610a47565b505050565b61078f61112c565b806008908161079e9190612620565b5050565b5f806107ad836111e7565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361081d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081490612739565b60405180910390fd5b80915050919050565b5f8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610895576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088c906127c7565b60405180910390fd5b60035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b6108e261112c565b6108eb5f611220565b565b600980546108fa90612241565b80601f016020809104026020016040519081016040528092919081815260200182805461092690612241565b80156109715780601f1061094857610100808354040283529160200191610971565b820191905f5260205f20905b81548152906001019060200180831161095457829003601f168201915b505050505081565b5f60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546109b090612241565b80601f01602080910402602001604051908101604052809291908181526020018280546109dc90612241565b8015610a275780601f106109fe57610100808354040283529160200191610a27565b820191905f5260205f20905b815481529060010190602001808311610a0a57829003601f168201915b5050505050905090565b610a43610a3c610cef565b83836112e3565b5050565b610a58610a52610cef565b83610dac565b610a97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8e906123fd565b60405180910390fd5b610aa38484848461144a565b50505050565b6060610ab4826114a6565b610af3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aea90612855565b60405180910390fd5b610afb6114e6565b610b0483611576565b604051602001610b159291906128ad565b6040516020818303038152906040529050919050565b5f60055f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b610bc161112c565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610c2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2690612940565b60405180910390fd5b610c3881611220565b50565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610cad816114a6565b610cec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce390612739565b60405180910390fd5b50565b5f33905090565b8160045f8381526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610d66836107a2565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b5f80610db7836107a2565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610df95750610df88185610b2b565b5b80610e3757508373ffffffffffffffffffffffffffffffffffffffff16610e1f84610515565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610e60826107a2565b73ffffffffffffffffffffffffffffffffffffffff1614610eb6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ead906129ce565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1b90612a5c565b60405180910390fd5b610f318383836001611640565b8273ffffffffffffffffffffffffffffffffffffffff16610f51826107a2565b73ffffffffffffffffffffffffffffffffffffffff1614610fa7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9e906129ce565b60405180910390fd5b60045f8281526020019081526020015f205f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600160035f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282540392505081905550600160035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055508160025f8381526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46111278383836001611646565b505050565b611134610cef565b73ffffffffffffffffffffffffffffffffffffffff16611152610979565b73ffffffffffffffffffffffffffffffffffffffff16146111a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119f90612ac4565b60405180910390fd5b565b6001815f015f828254019250508190555050565b5f815f01549050919050565b6111e3828260405180602001604052805f81525061164c565b5050565b5f60025f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b5f60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160065f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611351576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134890612b2c565b60405180910390fd5b8060055f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161143d9190611c59565b60405180910390a3505050565b611455848484610e40565b611461848484846116a6565b6114a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149790612bba565b60405180910390fd5b50505050565b5f8073ffffffffffffffffffffffffffffffffffffffff166114c7836111e7565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6060600880546114f590612241565b80601f016020809104026020016040519081016040528092919081815260200182805461152190612241565b801561156c5780601f106115435761010080835404028352916020019161156c565b820191905f5260205f20905b81548152906001019060200180831161154f57829003601f168201915b5050505050905090565b60605f600161158484611828565b0190505f8167ffffffffffffffff8111156115a2576115a1611ebd565b5b6040519080825280601f01601f1916602001820160405280156115d45781602001600182028036833780820191505090505b5090505f82602001820190505b600115611635578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161162a57611629612bd8565b5b0494505f85036115e1575b819350505050919050565b50505050565b50505050565b6116568383611979565b6116625f8484846116a6565b6116a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169890612bba565b60405180910390fd5b505050565b5f6116c68473ffffffffffffffffffffffffffffffffffffffff16611b8c565b1561181b578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026116ef610cef565b8786866040518563ffffffff1660e01b81526004016117119493929190612c57565b6020604051808303815f875af192505050801561174c57506040513d601f19601f820116820180604052508101906117499190612cb5565b60015b6117cb573d805f811461177a576040519150601f19603f3d011682016040523d82523d5f602084013e61177f565b606091505b505f8151036117c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ba90612bba565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611820565b600190505b949350505050565b5f805f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611884577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161187a57611879612bd8565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106118c1576d04ee2d6d415b85acef810000000083816118b7576118b6612bd8565b5b0492506020810190505b662386f26fc1000083106118f057662386f26fc1000083816118e6576118e5612bd8565b5b0492506010810190505b6305f5e1008310611919576305f5e100838161190f5761190e612bd8565b5b0492506008810190505b612710831061193e57612710838161193457611933612bd8565b5b0492506004810190505b60648310611961576064838161195757611956612bd8565b5b0492506002810190505b600a8310611970576001810190505b80915050919050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036119e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119de90612d2a565b60405180910390fd5b6119f0816114a6565b15611a30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a2790612d92565b60405180910390fd5b611a3d5f83836001611640565b611a46816114a6565b15611a86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a7d90612d92565b60405180910390fd5b600160035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055508160025f8381526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff165f73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611b885f83836001611646565b5050565b5f808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b5f604051905090565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611bf381611bbf565b8114611bfd575f80fd5b50565b5f81359050611c0e81611bea565b92915050565b5f60208284031215611c2957611c28611bb7565b5b5f611c3684828501611c00565b91505092915050565b5f8115159050919050565b611c5381611c3f565b82525050565b5f602082019050611c6c5f830184611c4a565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015611ca9578082015181840152602081019050611c8e565b5f8484015250505050565b5f601f19601f8301169050919050565b5f611cce82611c72565b611cd88185611c7c565b9350611ce8818560208601611c8c565b611cf181611cb4565b840191505092915050565b5f6020820190508181035f830152611d148184611cc4565b905092915050565b5f819050919050565b611d2e81611d1c565b8114611d38575f80fd5b50565b5f81359050611d4981611d25565b92915050565b5f60208284031215611d6457611d63611bb7565b5b5f611d7184828501611d3b565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611da382611d7a565b9050919050565b611db381611d99565b82525050565b5f602082019050611dcc5f830184611daa565b92915050565b611ddb81611d99565b8114611de5575f80fd5b50565b5f81359050611df681611dd2565b92915050565b5f8060408385031215611e1257611e11611bb7565b5b5f611e1f85828601611de8565b9250506020611e3085828601611d3b565b9150509250929050565b5f805f60608486031215611e5157611e50611bb7565b5b5f611e5e86828701611de8565b9350506020611e6f86828701611de8565b9250506040611e8086828701611d3b565b9150509250925092565b5f60208284031215611e9f57611e9e611bb7565b5b5f611eac84828501611de8565b91505092915050565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b611ef382611cb4565b810181811067ffffffffffffffff82111715611f1257611f11611ebd565b5b80604052505050565b5f611f24611bae565b9050611f308282611eea565b919050565b5f67ffffffffffffffff821115611f4f57611f4e611ebd565b5b611f5882611cb4565b9050602081019050919050565b828183375f83830152505050565b5f611f85611f8084611f35565b611f1b565b905082815260208101848484011115611fa157611fa0611eb9565b5b611fac848285611f65565b509392505050565b5f82601f830112611fc857611fc7611eb5565b5b8135611fd8848260208601611f73565b91505092915050565b5f60208284031215611ff657611ff5611bb7565b5b5f82013567ffffffffffffffff81111561201357612012611bbb565b5b61201f84828501611fb4565b91505092915050565b61203181611d1c565b82525050565b5f60208201905061204a5f830184612028565b92915050565b61205981611c3f565b8114612063575f80fd5b50565b5f8135905061207481612050565b92915050565b5f80604083850312156120905761208f611bb7565b5b5f61209d85828601611de8565b92505060206120ae85828601612066565b9150509250929050565b5f67ffffffffffffffff8211156120d2576120d1611ebd565b5b6120db82611cb4565b9050602081019050919050565b5f6120fa6120f5846120b8565b611f1b565b90508281526020810184848401111561211657612115611eb9565b5b612121848285611f65565b509392505050565b5f82601f83011261213d5761213c611eb5565b5b813561214d8482602086016120e8565b91505092915050565b5f805f806080858703121561216e5761216d611bb7565b5b5f61217b87828801611de8565b945050602061218c87828801611de8565b935050604061219d87828801611d3b565b925050606085013567ffffffffffffffff8111156121be576121bd611bbb565b5b6121ca87828801612129565b91505092959194509250565b5f80604083850312156121ec576121eb611bb7565b5b5f6121f985828601611de8565b925050602061220a85828601611de8565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061225857607f821691505b60208210810361226b5761226a612214565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e655f8201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b5f6122cb602183611c7c565b91506122d682612271565b604082019050919050565b5f6020820190508181035f8301526122f8816122bf565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f5f8201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b5f612359603d83611c7c565b9150612364826122ff565b604082019050919050565b5f6020820190508181035f8301526123868161234d565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e655f8201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b5f6123e7602d83611c7c565b91506123f28261238d565b604082019050919050565b5f6020820190508181035f830152612414816123db565b9050919050565b7f43616e6e6f74206d696e7420746f207a65726f206164647265737300000000005f82015250565b5f61244f601b83611c7c565b915061245a8261241b565b602082019050919050565b5f6020820190508181035f83015261247c81612443565b9050919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026124df7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826124a4565b6124e986836124a4565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61252461251f61251a84611d1c565b612501565b611d1c565b9050919050565b5f819050919050565b61253d8361250a565b6125516125498261252b565b8484546124b0565b825550505050565b5f90565b612565612559565b612570818484612534565b505050565b5b81811015612593576125885f8261255d565b600181019050612576565b5050565b601f8211156125d8576125a981612483565b6125b284612495565b810160208510156125c1578190505b6125d56125cd85612495565b830182612575565b50505b505050565b5f82821c905092915050565b5f6125f85f19846008026125dd565b1980831691505092915050565b5f61261083836125e9565b9150826002028217905092915050565b61262982611c72565b67ffffffffffffffff81111561264257612641611ebd565b5b61264c8254612241565b612657828285612597565b5f60209050601f831160018114612688575f8415612676578287015190505b6126808582612605565b8655506126e7565b601f19841661269686612483565b5f5b828110156126bd57848901518255600182019150602085019450602081019050612698565b868310156126da57848901516126d6601f8916826125e9565b8355505b6001600288020188555050505b505050505050565b7f4552433732313a20696e76616c696420746f6b656e20494400000000000000005f82015250565b5f612723601883611c7c565b915061272e826126ef565b602082019050919050565b5f6020820190508181035f83015261275081612717565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f7420612076615f8201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b5f6127b1602983611c7c565b91506127bc82612757565b604082019050919050565b5f6020820190508181035f8301526127de816127a5565b9050919050565b7f45524337323155524953746f726167653a2055524920717565727920666f72205f8201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b5f61283f603183611c7c565b915061284a826127e5565b604082019050919050565b5f6020820190508181035f83015261286c81612833565b9050919050565b5f81905092915050565b5f61288782611c72565b6128918185612873565b93506128a1818560208601611c8c565b80840191505092915050565b5f6128b8828561287d565b91506128c4828461287d565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f61292a602683611c7c565b9150612935826128d0565b604082019050919050565b5f6020820190508181035f8301526129578161291e565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f7272656374205f8201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b5f6129b8602583611c7c565b91506129c38261295e565b604082019050919050565b5f6020820190508181035f8301526129e5816129ac565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f206164645f8201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b5f612a46602483611c7c565b9150612a51826129ec565b604082019050919050565b5f6020820190508181035f830152612a7381612a3a565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f612aae602083611c7c565b9150612ab982612a7a565b602082019050919050565b5f6020820190508181035f830152612adb81612aa2565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c6572000000000000005f82015250565b5f612b16601983611c7c565b9150612b2182612ae2565b602082019050919050565b5f6020820190508181035f830152612b4381612b0a565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e2045524337323152655f8201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b5f612ba4603283611c7c565b9150612baf82612b4a565b604082019050919050565b5f6020820190508181035f830152612bd181612b98565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f81519050919050565b5f82825260208201905092915050565b5f612c2982612c05565b612c338185612c0f565b9350612c43818560208601611c8c565b612c4c81611cb4565b840191505092915050565b5f608082019050612c6a5f830187611daa565b612c776020830186611daa565b612c846040830185612028565b8181036060830152612c968184612c1f565b905095945050505050565b5f81519050612caf81611bea565b92915050565b5f60208284031215612cca57612cc9611bb7565b5b5f612cd784828501612ca1565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f20616464726573735f82015250565b5f612d14602083611c7c565b9150612d1f82612ce0565b602082019050919050565b5f6020820190508181035f830152612d4181612d08565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e746564000000005f82015250565b5f612d7c601c83611c7c565b9150612d8782612d48565b602082019050919050565b5f6020820190508181035f830152612da981612d70565b905091905056fea264697066735822122086c45dc74b602805ad41043c661da3083563e91425a4999363697d241fcfdce964736f6c63430008150033",
}

// AstronautNftABI is the input ABI used to generate the binding from.
// Deprecated: Use AstronautNftMetaData.ABI instead.
var AstronautNftABI = AstronautNftMetaData.ABI

// AstronautNftBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AstronautNftMetaData.Bin instead.
var AstronautNftBin = AstronautNftMetaData.Bin

// DeployAstronautNft deploys a new Ethereum contract, binding an instance of AstronautNft to it.
func DeployAstronautNft(auth *bind.TransactOpts, backend bind.ContractBackend, _baseURL string) (common.Address, *types.Transaction, *AstronautNft, error) {
	parsed, err := AstronautNftMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AstronautNftBin), backend, _baseURL)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AstronautNft{AstronautNftCaller: AstronautNftCaller{contract: contract}, AstronautNftTransactor: AstronautNftTransactor{contract: contract}, AstronautNftFilterer: AstronautNftFilterer{contract: contract}}, nil
}

// AstronautNft is an auto generated Go binding around an Ethereum contract.
type AstronautNft struct {
	AstronautNftCaller     // Read-only binding to the contract
	AstronautNftTransactor // Write-only binding to the contract
	AstronautNftFilterer   // Log filterer for contract events
}

// AstronautNftCaller is an auto generated read-only Go binding around an Ethereum contract.
type AstronautNftCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AstronautNftTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AstronautNftTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AstronautNftFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AstronautNftFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AstronautNftSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AstronautNftSession struct {
	Contract     *AstronautNft     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AstronautNftCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AstronautNftCallerSession struct {
	Contract *AstronautNftCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// AstronautNftTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AstronautNftTransactorSession struct {
	Contract     *AstronautNftTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// AstronautNftRaw is an auto generated low-level Go binding around an Ethereum contract.
type AstronautNftRaw struct {
	Contract *AstronautNft // Generic contract binding to access the raw methods on
}

// AstronautNftCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AstronautNftCallerRaw struct {
	Contract *AstronautNftCaller // Generic read-only contract binding to access the raw methods on
}

// AstronautNftTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AstronautNftTransactorRaw struct {
	Contract *AstronautNftTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAstronautNft creates a new instance of AstronautNft, bound to a specific deployed contract.
func NewAstronautNft(address common.Address, backend bind.ContractBackend) (*AstronautNft, error) {
	contract, err := bindAstronautNft(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AstronautNft{AstronautNftCaller: AstronautNftCaller{contract: contract}, AstronautNftTransactor: AstronautNftTransactor{contract: contract}, AstronautNftFilterer: AstronautNftFilterer{contract: contract}}, nil
}

// NewAstronautNftCaller creates a new read-only instance of AstronautNft, bound to a specific deployed contract.
func NewAstronautNftCaller(address common.Address, caller bind.ContractCaller) (*AstronautNftCaller, error) {
	contract, err := bindAstronautNft(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AstronautNftCaller{contract: contract}, nil
}

// NewAstronautNftTransactor creates a new write-only instance of AstronautNft, bound to a specific deployed contract.
func NewAstronautNftTransactor(address common.Address, transactor bind.ContractTransactor) (*AstronautNftTransactor, error) {
	contract, err := bindAstronautNft(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AstronautNftTransactor{contract: contract}, nil
}

// NewAstronautNftFilterer creates a new log filterer instance of AstronautNft, bound to a specific deployed contract.
func NewAstronautNftFilterer(address common.Address, filterer bind.ContractFilterer) (*AstronautNftFilterer, error) {
	contract, err := bindAstronautNft(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AstronautNftFilterer{contract: contract}, nil
}

// bindAstronautNft binds a generic wrapper to an already deployed contract.
func bindAstronautNft(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := AstronautNftMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AstronautNft *AstronautNftRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AstronautNft.Contract.AstronautNftCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AstronautNft *AstronautNftRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AstronautNft.Contract.AstronautNftTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AstronautNft *AstronautNftRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AstronautNft.Contract.AstronautNftTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AstronautNft *AstronautNftCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AstronautNft.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AstronautNft *AstronautNftTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AstronautNft.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AstronautNft *AstronautNftTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AstronautNft.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_AstronautNft *AstronautNftCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _AstronautNft.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_AstronautNft *AstronautNftSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _AstronautNft.Contract.BalanceOf(&_AstronautNft.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_AstronautNft *AstronautNftCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _AstronautNft.Contract.BalanceOf(&_AstronautNft.CallOpts, owner)
}

// ContractURIString is a free data retrieval call binding the contract method 0x7e41d835.
//
// Solidity: function contractURIString() view returns(string)
func (_AstronautNft *AstronautNftCaller) ContractURIString(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _AstronautNft.contract.Call(opts, &out, "contractURIString")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ContractURIString is a free data retrieval call binding the contract method 0x7e41d835.
//
// Solidity: function contractURIString() view returns(string)
func (_AstronautNft *AstronautNftSession) ContractURIString() (string, error) {
	return _AstronautNft.Contract.ContractURIString(&_AstronautNft.CallOpts)
}

// ContractURIString is a free data retrieval call binding the contract method 0x7e41d835.
//
// Solidity: function contractURIString() view returns(string)
func (_AstronautNft *AstronautNftCallerSession) ContractURIString() (string, error) {
	return _AstronautNft.Contract.ContractURIString(&_AstronautNft.CallOpts)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_AstronautNft *AstronautNftCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _AstronautNft.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_AstronautNft *AstronautNftSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _AstronautNft.Contract.GetApproved(&_AstronautNft.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_AstronautNft *AstronautNftCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _AstronautNft.Contract.GetApproved(&_AstronautNft.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_AstronautNft *AstronautNftCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _AstronautNft.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_AstronautNft *AstronautNftSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _AstronautNft.Contract.IsApprovedForAll(&_AstronautNft.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_AstronautNft *AstronautNftCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _AstronautNft.Contract.IsApprovedForAll(&_AstronautNft.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_AstronautNft *AstronautNftCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _AstronautNft.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_AstronautNft *AstronautNftSession) Name() (string, error) {
	return _AstronautNft.Contract.Name(&_AstronautNft.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_AstronautNft *AstronautNftCallerSession) Name() (string, error) {
	return _AstronautNft.Contract.Name(&_AstronautNft.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_AstronautNft *AstronautNftCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AstronautNft.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_AstronautNft *AstronautNftSession) Owner() (common.Address, error) {
	return _AstronautNft.Contract.Owner(&_AstronautNft.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_AstronautNft *AstronautNftCallerSession) Owner() (common.Address, error) {
	return _AstronautNft.Contract.Owner(&_AstronautNft.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_AstronautNft *AstronautNftCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _AstronautNft.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_AstronautNft *AstronautNftSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _AstronautNft.Contract.OwnerOf(&_AstronautNft.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_AstronautNft *AstronautNftCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _AstronautNft.Contract.OwnerOf(&_AstronautNft.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_AstronautNft *AstronautNftCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _AstronautNft.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_AstronautNft *AstronautNftSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _AstronautNft.Contract.SupportsInterface(&_AstronautNft.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_AstronautNft *AstronautNftCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _AstronautNft.Contract.SupportsInterface(&_AstronautNft.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_AstronautNft *AstronautNftCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _AstronautNft.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_AstronautNft *AstronautNftSession) Symbol() (string, error) {
	return _AstronautNft.Contract.Symbol(&_AstronautNft.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_AstronautNft *AstronautNftCallerSession) Symbol() (string, error) {
	return _AstronautNft.Contract.Symbol(&_AstronautNft.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_AstronautNft *AstronautNftCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _AstronautNft.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_AstronautNft *AstronautNftSession) TokenURI(tokenId *big.Int) (string, error) {
	return _AstronautNft.Contract.TokenURI(&_AstronautNft.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_AstronautNft *AstronautNftCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _AstronautNft.Contract.TokenURI(&_AstronautNft.CallOpts, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_AstronautNft *AstronautNftTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AstronautNft.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_AstronautNft *AstronautNftSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AstronautNft.Contract.Approve(&_AstronautNft.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_AstronautNft *AstronautNftTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AstronautNft.Contract.Approve(&_AstronautNft.TransactOpts, to, tokenId)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_AstronautNft *AstronautNftTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AstronautNft.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_AstronautNft *AstronautNftSession) RenounceOwnership() (*types.Transaction, error) {
	return _AstronautNft.Contract.RenounceOwnership(&_AstronautNft.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_AstronautNft *AstronautNftTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _AstronautNft.Contract.RenounceOwnership(&_AstronautNft.TransactOpts)
}

// SafeMint is a paid mutator transaction binding the contract method 0x40d097c3.
//
// Solidity: function safeMint(address to) returns()
func (_AstronautNft *AstronautNftTransactor) SafeMint(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _AstronautNft.contract.Transact(opts, "safeMint", to)
}

// SafeMint is a paid mutator transaction binding the contract method 0x40d097c3.
//
// Solidity: function safeMint(address to) returns()
func (_AstronautNft *AstronautNftSession) SafeMint(to common.Address) (*types.Transaction, error) {
	return _AstronautNft.Contract.SafeMint(&_AstronautNft.TransactOpts, to)
}

// SafeMint is a paid mutator transaction binding the contract method 0x40d097c3.
//
// Solidity: function safeMint(address to) returns()
func (_AstronautNft *AstronautNftTransactorSession) SafeMint(to common.Address) (*types.Transaction, error) {
	return _AstronautNft.Contract.SafeMint(&_AstronautNft.TransactOpts, to)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_AstronautNft *AstronautNftTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AstronautNft.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_AstronautNft *AstronautNftSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AstronautNft.Contract.SafeTransferFrom(&_AstronautNft.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_AstronautNft *AstronautNftTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AstronautNft.Contract.SafeTransferFrom(&_AstronautNft.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_AstronautNft *AstronautNftTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _AstronautNft.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_AstronautNft *AstronautNftSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _AstronautNft.Contract.SafeTransferFrom0(&_AstronautNft.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_AstronautNft *AstronautNftTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _AstronautNft.Contract.SafeTransferFrom0(&_AstronautNft.TransactOpts, from, to, tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_AstronautNft *AstronautNftTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _AstronautNft.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_AstronautNft *AstronautNftSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _AstronautNft.Contract.SetApprovalForAll(&_AstronautNft.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_AstronautNft *AstronautNftTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _AstronautNft.Contract.SetApprovalForAll(&_AstronautNft.TransactOpts, operator, approved)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string _uri) returns()
func (_AstronautNft *AstronautNftTransactor) SetBaseURI(opts *bind.TransactOpts, _uri string) (*types.Transaction, error) {
	return _AstronautNft.contract.Transact(opts, "setBaseURI", _uri)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string _uri) returns()
func (_AstronautNft *AstronautNftSession) SetBaseURI(_uri string) (*types.Transaction, error) {
	return _AstronautNft.Contract.SetBaseURI(&_AstronautNft.TransactOpts, _uri)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string _uri) returns()
func (_AstronautNft *AstronautNftTransactorSession) SetBaseURI(_uri string) (*types.Transaction, error) {
	return _AstronautNft.Contract.SetBaseURI(&_AstronautNft.TransactOpts, _uri)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_AstronautNft *AstronautNftTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AstronautNft.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_AstronautNft *AstronautNftSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AstronautNft.Contract.TransferFrom(&_AstronautNft.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_AstronautNft *AstronautNftTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AstronautNft.Contract.TransferFrom(&_AstronautNft.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_AstronautNft *AstronautNftTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _AstronautNft.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_AstronautNft *AstronautNftSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _AstronautNft.Contract.TransferOwnership(&_AstronautNft.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_AstronautNft *AstronautNftTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _AstronautNft.Contract.TransferOwnership(&_AstronautNft.TransactOpts, newOwner)
}

// AstronautNftApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the AstronautNft contract.
type AstronautNftApprovalIterator struct {
	Event *AstronautNftApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AstronautNftApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AstronautNftApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AstronautNftApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AstronautNftApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AstronautNftApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AstronautNftApproval represents a Approval event raised by the AstronautNft contract.
type AstronautNftApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_AstronautNft *AstronautNftFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*AstronautNftApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _AstronautNft.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &AstronautNftApprovalIterator{contract: _AstronautNft.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_AstronautNft *AstronautNftFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *AstronautNftApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _AstronautNft.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AstronautNftApproval)
				if err := _AstronautNft.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_AstronautNft *AstronautNftFilterer) ParseApproval(log types.Log) (*AstronautNftApproval, error) {
	event := new(AstronautNftApproval)
	if err := _AstronautNft.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AstronautNftApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the AstronautNft contract.
type AstronautNftApprovalForAllIterator struct {
	Event *AstronautNftApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AstronautNftApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AstronautNftApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AstronautNftApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AstronautNftApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AstronautNftApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AstronautNftApprovalForAll represents a ApprovalForAll event raised by the AstronautNft contract.
type AstronautNftApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_AstronautNft *AstronautNftFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*AstronautNftApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _AstronautNft.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &AstronautNftApprovalForAllIterator{contract: _AstronautNft.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_AstronautNft *AstronautNftFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *AstronautNftApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _AstronautNft.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AstronautNftApprovalForAll)
				if err := _AstronautNft.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_AstronautNft *AstronautNftFilterer) ParseApprovalForAll(log types.Log) (*AstronautNftApprovalForAll, error) {
	event := new(AstronautNftApprovalForAll)
	if err := _AstronautNft.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AstronautNftOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the AstronautNft contract.
type AstronautNftOwnershipTransferredIterator struct {
	Event *AstronautNftOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AstronautNftOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AstronautNftOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AstronautNftOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AstronautNftOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AstronautNftOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AstronautNftOwnershipTransferred represents a OwnershipTransferred event raised by the AstronautNft contract.
type AstronautNftOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_AstronautNft *AstronautNftFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*AstronautNftOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _AstronautNft.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &AstronautNftOwnershipTransferredIterator{contract: _AstronautNft.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_AstronautNft *AstronautNftFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *AstronautNftOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _AstronautNft.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AstronautNftOwnershipTransferred)
				if err := _AstronautNft.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_AstronautNft *AstronautNftFilterer) ParseOwnershipTransferred(log types.Log) (*AstronautNftOwnershipTransferred, error) {
	event := new(AstronautNftOwnershipTransferred)
	if err := _AstronautNft.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AstronautNftTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the AstronautNft contract.
type AstronautNftTransferIterator struct {
	Event *AstronautNftTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AstronautNftTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AstronautNftTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AstronautNftTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AstronautNftTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AstronautNftTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AstronautNftTransfer represents a Transfer event raised by the AstronautNft contract.
type AstronautNftTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_AstronautNft *AstronautNftFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*AstronautNftTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _AstronautNft.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &AstronautNftTransferIterator{contract: _AstronautNft.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_AstronautNft *AstronautNftFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *AstronautNftTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _AstronautNft.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AstronautNftTransfer)
				if err := _AstronautNft.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_AstronautNft *AstronautNftFilterer) ParseTransfer(log types.Log) (*AstronautNftTransfer, error) {
	event := new(AstronautNftTransfer)
	if err := _AstronautNft.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
